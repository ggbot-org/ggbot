import { ReactNode, SVGAttributes } from 'react'
import { Icon as _Icon } from 'trunx'

export const iconNames = [
	'account',
	'caret-left',
	'caret-right',
	'cross',
	'danger',
	'dots-vertical',
	'telegram',
] as const
type IconName = (typeof iconNames)[number]

type IconDefinition = {
	jsx: ReactNode
	viewBox: SVGAttributes<SVGSVGElement>['viewBox']
}

const iconRecord: Record<IconName, IconDefinition> = {
	account: {
		jsx: (
			<g fill="currentColor">
				<path d="M17.062,33.93 C7.728,33.93 0.133,26.335 0.133,17 C0.133,7.665 7.728,0.07 17.062,0.07 C26.397,0.07 33.992,7.665 33.992,17 C33.992,26.335 26.397,33.93 17.062,33.93 L17.062,33.93 Z M17.062,1.93 C8.753,1.93 1.992,8.69 1.992,17 C1.992,25.31 8.753,32.07 17.062,32.07 C25.372,32.07 32.133,25.31 32.133,17 C32.133,8.69 25.372,1.93 17.062,1.93 L17.062,1.93 Z" />
				<path d="M7.19,29.248 L5.487,28.499 C6.004,27.328 7.531,26.643 9.301,25.849 C11.008,25.083 13.133,24.13 13.133,23 L13.133,21.462 C12.528,20.955 11.503,19.865 11.342,18.226 C10.852,17.764 10.039,16.822 10.039,15.656 C10.039,14.948 10.319,14.377 10.565,14.014 C10.415,13.255 10.133,11.666 10.133,10.5 C10.133,6.594 12.853,4.07 17.062,4.07 C18.27,4.07 19.737,4.394 20.554,5.269 C22.462,5.605 23.992,7.864 23.992,10.5 C23.992,12.191 23.695,13.582 23.516,14.27 C23.715,14.607 23.93,15.107 23.93,15.687 C23.93,16.998 23.268,17.846 22.65,18.299 C22.475,19.915 21.554,20.957 20.992,21.451 L20.992,23 C20.992,23.961 22.734,24.607 24.419,25.232 C26.335,25.942 28.317,26.677 28.932,28.284 L27.193,28.948 C26.881,28.128 25.229,27.516 23.772,26.976 C21.598,26.169 19.133,25.255 19.133,23 L19.133,20.486 L19.567,20.213 C19.611,20.184 20.82,19.372 20.82,17.75 L20.82,17.121 L21.404,16.887 C21.502,16.842 22.07,16.543 22.07,15.687 C22.07,15.425 21.87,15.132 21.8,15.05 L21.461,14.652 L21.617,14.145 C21.622,14.129 22.133,12.557 22.133,10.5 C22.133,8.745 21.127,7.086 20.062,7.086 L19.528,7.086 L19.259,6.625 C19.062,6.288 18.226,5.93 17.062,5.93 C13.888,5.93 11.992,7.638 11.992,10.5 C11.992,11.852 12.466,14.029 12.471,14.051 L12.581,14.555 L12.213,14.915 C12.213,14.915 11.898,15.248 11.898,15.656 C11.898,16.171 12.516,16.812 12.815,17.042 L13.177,17.321 L13.18,17.781 C13.18,19.313 14.502,20.177 14.559,20.213 L14.987,20.487 L14.992,23 C14.992,25.335 12.373,26.51 10.061,27.546 C8.945,28.046 7.418,28.732 7.19,29.248" />
			</g>
		),
		viewBox: '0 0 34 34',
	},
	'caret-left': {
		jsx: (
			<g fill="currentColor">
				<polyline points="10.293 19.707 0.586 10 10.293 0.293 11.707 1.707 3.414 10 11.707 18.293 10.293 19.707" />
			</g>
		),
		viewBox: '0 0 15 20',
	},
	'caret-right': {
		jsx: (
			<g fill="currentColor">
				<polyline points="1.707 19.707 0.293 18.293 8.586 10 0.293 1.707 1.707 0.293 11.414 10 1.707 19.707" />
			</g>
		),
		viewBox: '0 0 10 20',
	},
	danger: {
		jsx: (
			<g fill="currentColor">
				<path d="M507.494,426.066L282.864,53.537c-5.677-9.415-15.87-15.172-26.865-15.172c-10.995,0-21.188,5.756-26.865,15.172 L4.506,426.066c-5.842,9.689-6.015,21.774-0.451,31.625c5.564,9.852,16.001,15.944,27.315,15.944h449.259 c11.314,0,21.751-6.093,27.315-15.944C513.508,447.839,513.336,435.755,507.494,426.066z M256.167,167.227 c12.901,0,23.817,7.278,23.817,20.178c0,39.363-4.631,95.929-4.631,135.292c0,10.255-11.247,14.554-19.186,14.554 c-10.584,0-19.516-4.3-19.516-14.554c0-39.363-4.63-95.929-4.63-135.292C232.021,174.505,242.605,167.227,256.167,167.227z M256.498,411.018c-14.554,0-25.471-11.908-25.471-25.47c0-13.893,10.916-25.47,25.471-25.47c13.562,0,25.14,11.577,25.14,25.47 C281.638,399.11,270.06,411.018,256.498,411.018z" />
			</g>
		),
		viewBox: '0 0 512 512',
	},
	'dots-vertical': {
		jsx: (
			<g fill="currentColor">
				<circle cx={10} cy={4} r={2} />
				<circle cx={10} cy={10} r={2} />
				<circle cx={10} cy={16} r={2} />
			</g>
		),
		viewBox: '0 0 20 20',
	},
	telegram: {
		jsx: (
			<g fill="currentColor">
				<path d="M 44.376953 5.9863281 C 43.889905 6.0076957 43.415817 6.1432497 42.988281 6.3144531 C 42.565113 6.4845113 40.128883 7.5243408 36.53125 9.0625 C 32.933617 10.600659 28.256963 12.603668 23.621094 14.589844 C 14.349356 18.562196 5.2382813 22.470703 5.2382812 22.470703 L 5.3046875 22.445312 C 5.3046875 22.445312 4.7547875 22.629122 4.1972656 23.017578 C 3.9185047 23.211806 3.6186028 23.462555 3.3730469 23.828125 C 3.127491 24.193695 2.9479735 24.711788 3.015625 25.259766 C 3.2532479 27.184511 5.2480469 27.730469 5.2480469 27.730469 L 5.2558594 27.734375 L 14.158203 30.78125 C 14.385177 31.538434 16.858319 39.792923 17.402344 41.541016 C 17.702797 42.507484 17.984013 43.064995 18.277344 43.445312 C 18.424133 43.635633 18.577962 43.782915 18.748047 43.890625 C 18.815627 43.933415 18.8867 43.965525 18.957031 43.994141 C 18.958531 43.994806 18.959437 43.99348 18.960938 43.994141 C 18.969579 43.997952 18.977708 43.998295 18.986328 44.001953 L 18.962891 43.996094 C 18.979231 44.002694 18.995359 44.013801 19.011719 44.019531 C 19.043456 44.030655 19.062905 44.030268 19.103516 44.039062 C 20.123059 44.395042 20.966797 43.734375 20.966797 43.734375 L 21.001953 43.707031 L 26.470703 38.634766 L 35.345703 45.554688 L 35.457031 45.605469 C 37.010484 46.295216 38.415349 45.910403 39.193359 45.277344 C 39.97137 44.644284 40.277344 43.828125 40.277344 43.828125 L 40.310547 43.742188 L 46.832031 9.7519531 C 46.998903 8.9915162 47.022612 8.334202 46.865234 7.7402344 C 46.707857 7.1462668 46.325492 6.6299361 45.845703 6.34375 C 45.365914 6.0575639 44.864001 5.9649605 44.376953 5.9863281 z M 44.429688 8.0195312 C 44.627491 8.0103707 44.774102 8.032983 44.820312 8.0605469 C 44.866523 8.0881109 44.887272 8.0844829 44.931641 8.2519531 C 44.976011 8.419423 45.000036 8.7721605 44.878906 9.3242188 L 44.875 9.3359375 L 38.390625 43.128906 C 38.375275 43.162926 38.240151 43.475531 37.931641 43.726562 C 37.616914 43.982653 37.266874 44.182554 36.337891 43.792969 L 26.632812 36.224609 L 26.359375 36.009766 L 26.353516 36.015625 L 23.451172 33.837891 L 39.761719 14.648438 A 1.0001 1.0001 0 0 0 38.974609 13 A 1.0001 1.0001 0 0 0 38.445312 13.167969 L 14.84375 28.902344 L 5.9277344 25.849609 C 5.9277344 25.849609 5.0423771 25.356927 5 25.013672 C 4.99765 24.994652 4.9871961 25.011869 5.0332031 24.943359 C 5.0792101 24.874869 5.1948546 24.759225 5.3398438 24.658203 C 5.6298218 24.456159 5.9609375 24.333984 5.9609375 24.333984 L 5.9941406 24.322266 L 6.0273438 24.308594 C 6.0273438 24.308594 15.138894 20.399882 24.410156 16.427734 C 29.045787 14.44166 33.721617 12.440122 37.318359 10.902344 C 40.914175 9.3649615 43.512419 8.2583658 43.732422 8.1699219 C 43.982886 8.0696253 44.231884 8.0286918 44.429688 8.0195312 z M 33.613281 18.792969 L 21.244141 33.345703 L 21.238281 33.351562 A 1.0001 1.0001 0 0 0 21.183594 33.423828 A 1.0001 1.0001 0 0 0 21.128906 33.507812 A 1.0001 1.0001 0 0 0 20.998047 33.892578 A 1.0001 1.0001 0 0 0 20.998047 33.900391 L 19.386719 41.146484 C 19.35993 41.068197 19.341173 41.039555 19.3125 40.947266 L 19.3125 40.945312 C 18.800713 39.30085 16.467362 31.5161 16.144531 30.439453 L 33.613281 18.792969 z M 22.640625 35.730469 L 24.863281 37.398438 L 21.597656 40.425781 L 22.640625 35.730469 z" />
			</g>
		),
		viewBox: '0 0 50 50',
	},
	cross: {
		jsx: (
			<g fill="currentColor">
				<path d="M202.82861,197.17188a3.99991,3.99991,0,1,1-5.65722,5.65624L128,133.65723,58.82861,202.82812a3.99991,3.99991,0,0,1-5.65722-5.65624L122.343,128,53.17139,58.82812a3.99991,3.99991,0,0,1,5.65722-5.65624L128,122.34277l69.17139-69.17089a3.99991,3.99991,0,0,1,5.65722,5.65624L133.657,128Z" />
			</g>
		),
		viewBox: '0 0 256 256',
	},
}

export type IconProps = Pick<SVGAttributes<SVGSVGElement>, 'onClick'> & {
	name: IconName
	/**
	 * Icon `size` can be a number to represent pixel units,
	 * or a string to represent em or rem units.
	 */
	size?: number | `${number}em` | `${number}rem`
}

export function Icon({ name, onClick, size = '1.5em' }: IconProps) {
	return (
		<_Icon bulma={{ 'is-clickable': onClick }}>
			<svg
				height={size}
				onClick={onClick}
				viewBox={iconRecord[name].viewBox}
				width={size}
				xmlns="http://www.w3.org/2000/svg"
			>
				{iconRecord[name].jsx}
			</svg>
		</_Icon>
	)
}
