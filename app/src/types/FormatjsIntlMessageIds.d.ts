// prettier-ignore
// ts-prune-ignore-next
export declare type FormatjsIntlMessageId =
  | "AccountId.label"
  | "AccountSettings.title"
  | "ApiKey.label"
  | "ApiSecret.label"
  | "AuthEnter.button"
  | "AuthEnter.title"
  | "AuthExit.button"
  | "AuthExit.message"
  | "AuthExit.title"
  | "AuthVerify.button"
  | "AuthVerify.failed"
  | "AuthVerify.checkEmail"
  | "AuthVerify.enterOneTimePassword"
  | "AuthVerify.resetEmail"
  | "AuthVerify.title"
  | "BacktestingActions.pause"
  | "BacktestingActions.resume"
  | "BacktestingActions.start"
  | "BacktestingActions.stop"
  | "Backtesting.title"
  | "BacktestingProgress.currentTime"
  | "BacktestingProgress.dayInterval"
  | "BacktestingProgress.title"
  | "BacktestingProgress.intervals"
  | "BacktestingProgress.waiting"
  | "BacktestingProgress.preparing"
  | "BinanceApi.error"
  | "BinanceApi.title"
  | "BinanceApi.test"
  | "BinanceApiKeyPermissionEnableReading.description"
  | "BinanceApiKeyPermissionEnableWithdrawals.description"
  | "BinanceApiKeyPermissionEnableSpotAndMarginTrading.description"
  | "BinanceApiKeyPermissionIpRestrict.description"
  | "CopyStrategy.chooseName"
  | "CopyStrategy.strategyInfo"
  | "CopyStrategy.title"
  | "CopyStrategy.button"
  | "CreateBinanceApi.title"
  | "CreateBinanceApi.button"
  | "CreateStrategy.button"
  | "CreateStrategy.chooseName"
  | "DailyInterval.from"
  | "DailyInterval.to"
  | "DeleteAccount.button"
  | "DeleteAccount.confirmation"
  | "DeleteAccount.dismiss"
  | "DeleteAccount.title"
  | "DeleteAccount.consent"
  | "DeleteAccount.question"
  | "DeleteBinanceApi.button"
  | "DeleteBinanceApi.confirmation"
  | "DeleteBinanceApi.dismiss"
  | "DeleteBinanceApi.title"
  | "DeleteBinanceApi.question"
  | "DeleteBinanceApi.warning"
  | "DeleteBinanceApi.info"
  | "DeleteStrategy.button"
  | "DeleteStrategy.confirmation"
  | "DeleteStrategy.dismiss"
  | "DeleteStrategy.message"
  | "DeleteStrategy.title"
  | "EditableFlow.save"
  | "Email.label"
  | "Footer.lastUpdate"
  | "FrequencyInput.every"
  | "FrequencyInput.interval"
  | "FrequencyInput.hour"
  | "FrequencyInput.minute"
  | "GenericError.message"
  | "GoCopyStrategy.label"
  | "GoSettings.label"
  | "InvalidStrategyKey.message"
  | "Memory.empty"
  | "Memory.title"
  | "Name.hasSpaces"
  | "Name.invalid"
  | "Navigation.account"
  | "Navigation.admin"
  | "Navigation.billing"
  | "Navigation.binance"
  | "Navigation.exit"
  | "Navigation.settings"
  | "Navigation.strategies"
  | "NoNetwork.title"
  | "NoNetwork.message"
  | "OneTimePassword.label"
  | "PleaseConfigureBinance.goToSettings"
  | "PleaseConfigureBinance.message"
  | "PleasePurchase.doNotShow"
  | "PleasePurchase.message"
  | "PleasePurchase.goToSettings"
  | "PleasePurchase.title"
  | "ProfitSummary.fees"
  | "ProfitSummary.minPrice"
  | "ProfitSummary.maxPrice"
  | "ProfitSummary.numBuys"
  | "ProfitSummary.numSells"
  | "ProfitSummary.title"
  | "PurchaseCanceled.message"
  | "RegenerateOneTimePassword.button"
  | "RegenerateOneTimePassword.message"
  | "RenameStrategy.button"
  | "RenameStrategy.chooseName"
  | "RenameStrategy.title"
  | "RenameStrategy.save"
  | "SchedulingItem.activate"
  | "SchedulingItem.dismiss"
  | "SchedulingItem.remove"
  | "Schedulings.add"
  | "Schedulings.title"
  | "Schedulings.cancel"
  | "Schedulings.save"
  | "SchedulingsErrorExceededQuota.message"
  | "SchedulingStatus.active"
  | "SchedulingStatus.inactive"
  | "SchedulingStatus.suspended"
  | "SelectCountry.label"
  | "ShareStrategy.label"
  | "ShareStrategy.copied"
  | "ShareStrategy.error"
  | "Strategies.noStrategy"
  | "StrategiesErrorExceededQuota.message"
  | "StrategyActions.title"
  | "StrategyNotFound.title"
  | "StrategyId.label"
  | "StrategyKind.label"
  | "StrategyName.label"
  | "SubscriptionEnd.label"
  | "SubscriptionPlan.label"
  | "SubscriptionInfo.title"
  | "SubscriptionInfo.pleasePurchase"
  | "SubscriptionNumMonths.label"
  | "SubscriptionPurchase.button"
  | "SubscriptionPurchase.couldRenew"
  | "SubscriptionPurchase.hint"
  | "SubscriptionPurchase.oneMonthPrice"
  | "SubscriptionPurchase.title"
  | "SubscriptionPurchased.message"
  | "SubscriptionStatus.active"
  | "SubscriptionStatus.expired"
  | "SubscriptionTotalPrice.label"
  | "SubscriptionTotalPrice.discount"
  | "Tabs.accounts"
  | "Tabs.backtesting"
  | "Tabs.flow"
  | "Tabs.manage"
  | "Tabs.newStrategy"
  | "Tabs.orders"
  | "Tabs.strategies"
  | "TimeoutError.message"
  | "WhenCreated.label";

declare global {
	namespace FormatjsIntl {
		interface Message {
			ids: FormatjsIntlMessageId
		}
	}
}
